<template>
    <section id="dummyVariableSingular-form">
        <el-form
            ref="form"
            :model="form"
            label-width="120px"
            :rules="rules"
            @submit.native.prevent="saveSubmit"
        >
            <el-form-item
                label="DummySingular Name"
                prop="name"
                :error="errors.get('name')"
            >
                <el-input
                    v-model="form.name"
                    suffix-icon="el-icon-edit"
                    @change="errors.clear('name')"
                />
            </el-form-item>
        </el-form>
        <div
            slot="footer"
            class="dialog-footer"
        >
            <el-button
                size="small"
                @click.native="cancel"
            >
                {{ $t('global.cancel') }}
            </el-button>
            <el-button
                :loading="formLoading"
                type="success"
                size="small"
                class="float-right"
                @click.native="saveSubmit"
            >
                {{ $t('global.save') }}
            </el-button>
        </div>
    </section>
</template>

<script>
import {Errors} from '@/includes/Errors'
import dummyVariableSingularApi from '../api'

export default {
    name: 'DummySingularForm',
    props: {
        initialForm: {
            type: Object,
            default: {}
        },
    },
    data() {
        return {
            errors: new Errors(),
            formLoading: false,
            formTitle: 'New DummySingular',
            form: {},
            rules: {
                name: [
                    { required: true, message: 'dummyVariableSingular name is required' },
                ],
            },
        }
    },
    mounted() {
        this.form = Object.assign({}, this.initialForm)
    },
    watch: {
        initialForm(formData) {
            if(_.isEmpty(formData)) this.clearForm()
            this.form = Object.assign({}, formData)
        }
    },
    methods: {
        saveSubmit() {
            this.$refs.form.validate((valid) => {
                if (valid) {
                    this.formLoading = true
                    this.errors.clear()
                    let action = this.form.id ? dummyVariableSingularApi.update : dummyVariableSingularApi.create

                    action(this.form).then((response) => {
                        this.$message({
                            message: response.data.message,
                            type: response.data.type
                        })
                        if(response.data.type === 'success')
                            this.$emit('saved')
                    }).catch(error => {
                        if (error.response.data.errors)
                            this.errors.record(error.response.data.errors)
                    }).finally(() => this.formLoading = false)
                }
            })
        },
        cancel() {
            this.clearForm()
            this.$emit('cancel')
        },
        clearForm() {
            this.errors.clear()
            if (this.$refs.form)
                this.$refs.form.resetFields()
        }
    },
}
</script>
